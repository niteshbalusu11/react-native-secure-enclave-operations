///
/// HybridSecureEnclaveOperationsSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridSecureEnclaveOperationsSpec``
public protocol HybridSecureEnclaveOperationsSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func isHardwareBackedKeyGenerationSupportedIos() throws -> Promise<Bool>
  func generateKeyIos() throws -> Promise<String>
  func attestKeyIos(keyId: String, challenge: String) throws -> Promise<String>
  func generateAssertionIos(keyId: String, data: String) throws -> Promise<String>
  func isPlayServicesAvailableAndroid() throws -> Promise<Bool>
  func prepareIntegrityTokenAndroid(cloudProjectNumber: String) throws -> Promise<Bool>
  func requestIntegrityTokenAndroid(requestHash: String) throws -> Promise<String>
  func getAttestationAndroid(challenge: String, keyId: String) throws -> Promise<String>
}

/// See ``HybridSecureEnclaveOperationsSpec``
public class HybridSecureEnclaveOperationsSpec_base {
  private weak var cxxWrapper: HybridSecureEnclaveOperationsSpec_cxx? = nil
  public func getCxxWrapper() -> HybridSecureEnclaveOperationsSpec_cxx {
  #if DEBUG
    guard self is HybridSecureEnclaveOperationsSpec else {
      fatalError("`self` is not a `HybridSecureEnclaveOperationsSpec`! Did you accidentally inherit from `HybridSecureEnclaveOperationsSpec_base` instead of `HybridSecureEnclaveOperationsSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridSecureEnclaveOperationsSpec_cxx(self as! HybridSecureEnclaveOperationsSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the SecureEnclaveOperations HybridObject.
 * Implement this protocol to create Swift-based instances of SecureEnclaveOperations.
 * ```swift
 * class HybridSecureEnclaveOperations : HybridSecureEnclaveOperationsSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridSecureEnclaveOperationsSpec = HybridSecureEnclaveOperationsSpec_protocol & HybridSecureEnclaveOperationsSpec_base
