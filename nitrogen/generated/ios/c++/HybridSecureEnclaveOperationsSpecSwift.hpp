///
/// HybridSecureEnclaveOperationsSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridSecureEnclaveOperationsSpec.hpp"

// Forward declaration of `HybridSecureEnclaveOperationsSpec_cxx` to properly resolve imports.
namespace SecureEnclaveOperations { class HybridSecureEnclaveOperationsSpec_cxx; }



#include <NitroModules/Promise.hpp>
#include <string>

#include "SecureEnclaveOperations-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::secureenclaveoperations {

  /**
   * The C++ part of HybridSecureEnclaveOperationsSpec_cxx.swift.
   *
   * HybridSecureEnclaveOperationsSpecSwift (C++) accesses HybridSecureEnclaveOperationsSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridSecureEnclaveOperationsSpec_cxx can directly inherit from the C++ class HybridSecureEnclaveOperationsSpec
   * to simplify the whole structure and memory management.
   */
  class HybridSecureEnclaveOperationsSpecSwift: public virtual HybridSecureEnclaveOperationsSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridSecureEnclaveOperationsSpecSwift(const SecureEnclaveOperations::HybridSecureEnclaveOperationsSpec_cxx& swiftPart):
      HybridObject(HybridSecureEnclaveOperationsSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline SecureEnclaveOperations::HybridSecureEnclaveOperationsSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::shared_ptr<Promise<bool>> isHardwareBackedKeyGenerationSupportedIos() override {
      auto __result = _swiftPart.isHardwareBackedKeyGenerationSupportedIos();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> generateKeyIos() override {
      auto __result = _swiftPart.generateKeyIos();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> attestKeyIos(const std::string& keyId, const std::string& challenge) override {
      auto __result = _swiftPart.attestKeyIos(keyId, challenge);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> generateAssertionIos(const std::string& keyId, const std::string& data) override {
      auto __result = _swiftPart.generateAssertionIos(keyId, data);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<bool>> isPlayServicesAvailableAndroid() override {
      auto __result = _swiftPart.isPlayServicesAvailableAndroid();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<bool>> prepareIntegrityTokenAndroid(const std::string& cloudProjectNumber) override {
      auto __result = _swiftPart.prepareIntegrityTokenAndroid(cloudProjectNumber);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> requestIntegrityTokenAndroid(const std::string& requestHash) override {
      auto __result = _swiftPart.requestIntegrityTokenAndroid(requestHash);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> getAttestationAndroid(const std::string& challenge, const std::string& keyId) override {
      auto __result = _swiftPart.getAttestationAndroid(challenge, keyId);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    SecureEnclaveOperations::HybridSecureEnclaveOperationsSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::secureenclaveoperations
